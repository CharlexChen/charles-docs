import{_ as p,r as e,o,c,b as n,d as a,e as t,a as i}from"./app-2r9GXMNB.js";const l={},u=i(`<h1 id="陈同学i前端-一起学vite-hmr-你好-上-👋" tabindex="-1"><a class="header-anchor" href="#陈同学i前端-一起学vite-hmr-你好-上-👋" aria-hidden="true">#</a> [陈同学i前端] 一起学Vite｜HMR，你好[上]👋</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>大家好，我是陈同学，一枚野生前端开发者，感谢各位的<strong>点赞、收藏、评论</strong></p><p>很高兴能和你一同学习～</p><p>近年来，前端领域技术更新迭代节奏较快，前端工程师们为了更好的进行项目开发、测试、构建、部署，开发出了各种各样的构建工具</p><p>像常见的Webpack、Rollup、Esbuild、Vite，每一类工具都有它的特点，均致力于提高前端领域的工程化水平</p><p>而工具出现的目标是<strong>解决前端工程当中的一些影响通性问题</strong></p><p>常见的痛点（需求点）有：模块化需求（ESM）、兼容高级语法、代码质量测试、静态资源处理、代码压缩、开发效率等</p><p>本节我们继续进行<code>Vite</code>知识的学习，具体安排如下：</p><ul><li>一起学Vite｜初识下一代的前端工具链</li><li>一起学Vite｜原来这玩意叫依赖预构建</li><li>一起学Vite｜实现第一个Vite插件</li><li>一起学Vite｜插件机制与流水线</li><li>一起学Vite｜HMR，你好[上]👋（本节）</li><li>一起学Vite｜HMR，你好[下]👋</li><li>一起学Vite｜模块联邦——代码共享的终极解决方案</li><li>一起学Vite｜简单手写开发服务器</li><li>一起学Vite｜简单手写打包器</li></ul><p>本文阅读成本与收益如下：</p><p>阅读耗时：<code>20mins</code></p><p>全文字数：<code>10k+</code></p><h2 id="预期效益" tabindex="-1"><a class="header-anchor" href="#预期效益" aria-hidden="true">#</a> 预期效益</h2><ul><li><code>HMR</code> 背景</li><li><code>Vite</code>的常用<code>HMR-API</code>与简单应用</li></ul><h2 id="环境" tabindex="-1"><a class="header-anchor" href="#环境" aria-hidden="true">#</a> 环境</h2><p><code>Vite</code>版本：v3.2.3</p><p><code>Node</code>版本：v16.16.0</p><p><code>pnpm</code>版本：v7.9.0</p><h2 id="hmr背景" tabindex="-1"><a class="header-anchor" href="#hmr背景" aria-hidden="true">#</a> HMR背景</h2><p><code>代码变更后查看更新后的页面效果</code>一直以来都是前端工程师的工作流程当中出现频率最高的环节</p><p>在前端界还没有大量工具与解决方案的时代，工程师们一度是通过<code>手动/自动刷新页面</code>的方式来解决应对这个开发环节</p><p>但随着互联网的发展，对前端产品的要求越来越高，一个项目里出现越来越多的模块，前端工程逐渐变得庞大，<code>手动/自动刷新页面</code>会很大程度上影响开发体验与效率</p><p>那有没有什么方法能够做到将页面实时动态更新成我们修改代码后的效果，而<strong>避免刷新页面和丢失状态数据</strong>呢</p><p>那就是我们今天要学习(复习)的<code>HMR</code>技术！</p><p><code>HMR</code>(Hot Module Replacement)：模块热替换，即自动将页面中发生变化的模块替换为新的模块，并且不影响其它模块的正常工作</p><p>其核心实现了两个重要能力：</p><ul><li>局部刷新（边界模块更新）</li><li>状态保存（不刷新以维持状态数据）</li></ul><h2 id="vite-的-hmr-api" tabindex="-1"><a class="header-anchor" href="#vite-的-hmr-api" aria-hidden="true">#</a> Vite 的 HMR API</h2><p>在<code>Vite</code>中的<code>HMR-API</code>类型如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">ImportMeta</span> <span class="token punctuation">{</span>
  url<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token keyword">readonly</span> hot<span class="token operator">?</span><span class="token operator">:</span> ViteHotContext <span class="token comment">// HMR 依赖 hot 属性</span>
  <span class="token keyword">readonly</span> env<span class="token operator">:</span> ImportMetaEnv
  glob<span class="token operator">:</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./importGlob&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ImportGlobFunction
  globEager<span class="token operator">:</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./importGlob&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ImportGlobEagerFunction
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ViteHotContext</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> data<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token comment">// 共享数据</span>
  <span class="token comment">// 模块作为热更新边界，注册模块热更新（监听目标的模块文件更新）时的回调函数</span>
  <span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  <span class="token function">accept</span><span class="token punctuation">(</span><span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span>mod<span class="token operator">:</span> ModuleNamespace <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  <span class="token function">accept</span><span class="token punctuation">(</span>dep<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span>mod<span class="token operator">:</span> ModuleNamespace <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  <span class="token function">accept</span><span class="token punctuation">(</span>
    deps<span class="token operator">:</span> <span class="token keyword">readonly</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span>mods<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>ModuleNamespace <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token comment">// 注册模块更新or卸载时需要执行的回调函数</span>
  <span class="token function">acceptExports</span><span class="token punctuation">(</span>
    exportNames<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">readonly</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    cb<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>mod<span class="token operator">:</span> ModuleNamespace <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token comment">// HMR partial accept</span>
  <span class="token function">prune</span><span class="token punctuation">(</span><span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token comment">// 注册一个回调，当模块在页面上不再被导入时调用</span>
  <span class="token function">decline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token comment">// 方法调用之后，相当于表示此模块不可热更新</span>
  <span class="token function">invalidate</span><span class="token punctuation">(</span>message<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token comment">// 一个接收自身的模块可以在运行时意识到它不能处理 HMR 更新，因此需要将更新强制传递给导入者</span>
  <span class="token generic-function"><span class="token function">on</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
    event<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span>
    <span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span>payload<span class="token operator">:</span> InferCustomEventPayload<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token comment">// 监听 HMR 的自定义事件</span>
  <span class="token generic-function"><span class="token function">send</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> data<span class="token operator">?</span><span class="token operator">:</span> InferCustomEventPayload<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token comment">// 发送自定义事件到 Vite 开发服务器，如果在连接前调用，数据会先被缓存、等到连接建立好后再发送</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>import.meta</code>对象为现代浏览器原生的一个内置对象</p></blockquote><p>通过查看上述的 <code>import.meta.hot</code> 类型，我们可以发现有一个属性方法存在有四个重载类型（<code>accept</code>）</p><p>而 <code>accept</code> 属性方法也正是 <code>Vite</code> 实现 <code>HMR</code> 的关键API</p><h3 id="import-meta-hot-accept" tabindex="-1"><a class="header-anchor" href="#import-meta-hot-accept" aria-hidden="true">#</a> <code>import.meta.hot.accept</code></h3><p><code>accept</code>：用于接受模块更新，并调用<strong>更新影响范围对应</strong>的回调函数(通过accept注册的回调函数)</p><blockquote><p>&quot;接受&quot; 热更新的模块被认为是 <code>HMR</code> 边界</p></blockquote><p>根据类型描述我们可以得知 <code>accept</code> 有两种使用方法：</p><ul><li>接收模块自身的热更新信息</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// render.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">renderPage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> app <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">querySelector</span><span class="token generic class-name"><span class="token operator">&lt;</span>HTMLDivElement<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
  app<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
      &lt;h1&gt;This is a demo for Vite-HMR&lt;/h1&gt;
      &lt;p target=&quot;_blank&quot;&gt;hmr is a excellent tool&lt;/p&gt;
    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 通过accept方法注册当前模块(模块自身为HMR边界)热更新时的回调函数，开发者每次保存对该模块文件(render.ts)的修改时，所注册的回调函数自动执行</span>
  <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">(</span>newModule<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    newModule<span class="token operator">?.</span><span class="token function">renderPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://charlex-1307761018.cos.ap-guangzhou.myqcloud.com/image/20230110141148.png" alt="20230110141148"></p><ul><li>接受直接依赖项的更新</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> renderPage <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./render.ts&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./foo.ts&#39;</span>

<span class="token function">renderPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">&#39;./render.ts&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>newModule<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 回调函数接收到更新后的&#39;./render.ts&#39; 模块</span>
    newModule<span class="token operator">?.</span><span class="token function">renderPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://charlex-1307761018.cos.ap-guangzhou.myqcloud.com/image/20230110141207.png" alt="20230110141207"></p><p>当然当模块文件作为多个依赖项的HMR边界时，accept方法也支持传入依赖模块的字符串数组</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> renderPage <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./render.ts&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./foo.ts&#39;</span>

<span class="token function">renderPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 可以接受一个依赖模块的数组</span>
  <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>
    <span class="token punctuation">[</span><span class="token string">&#39;./foo.ts&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./render.ts&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">[</span>newFooModule<span class="token punctuation">,</span> newRenderModule<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 只有当所更新的模块非空时，回调函数接收一个数组</span>
      <span class="token comment">// 如果更新不成功（例如语法错误），则该数组为空</span>
      newFooModule<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      newRenderModule<span class="token punctuation">.</span><span class="token function">renderPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://charlex-1307761018.cos.ap-guangzhou.myqcloud.com/image/20230110141223.png" alt="20230110141223"></p><h3 id="import-meta-hot-dispose" tabindex="-1"><a class="header-anchor" href="#import-meta-hot-dispose" aria-hidden="true">#</a> <code>import.meta.hot.dispose</code></h3><p>模块销毁时逻辑：用于注册在模块更新、旧模块销毁时的回调处理函数</p><p>现在我们通过为<code>render.ts</code>模块文件增加定时器的逻辑来感受一下这个API的应用</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// render.ts</span>
<span class="token keyword">let</span> timer<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">(</span>newMod<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    newMod<span class="token punctuation">.</span><span class="token function">renderPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// &gt;&gt;&gt;change_1: 通过dispose方法注册模块更新or卸载时需要执行的回调函数</span>
  <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&gt;&gt;&gt;dispose&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// &gt;&gt;&gt;change_1</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">renderPage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// &gt;&gt;&gt;change_2: 设置一个1秒的定时器，每秒钟在控制台打印一下count变量当前的数值</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&gt;&gt;&gt;setInterval-1&#39;</span><span class="token punctuation">)</span>
  timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// &gt;&gt;&gt;change_2</span>
  <span class="token keyword">const</span> app <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">querySelector</span><span class="token generic class-name"><span class="token operator">&lt;</span>HTMLDivElement<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
  app<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
      &lt;h1&gt;This is a demo for Vite-HMR&lt;/h1&gt;
      &lt;p target=&quot;_blank&quot;&gt;hmr is a excellent tool&lt;/p&gt;
    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按照以上逻辑执行<code>vite</code>启动开发服务器打开页面控制台</p><p>在第三秒时将<code>console.log(&#39;&gt;&gt;&gt;setInterval-1&#39;)</code>修改为<code>console.log(&#39;&gt;&gt;&gt;setInterval-2&#39;)</code>，即会在控制台看到如下的情况</p><p><img src="https://charlex-1307761018.cos.ap-guangzhou.myqcloud.com/image/20230125131602.png" alt="20230125131602"></p><p>蓝色框执行于文件修改保存时刻，对应<code>dispose</code>注册回调函数的执行时机</p><p>可见后续计时器内打印的count变量数值被重置了，那有没有什么办法可以保持count的当前数据呢(保持当前状态数据)，接下来我们学习下一个<code>HMR-API</code></p><h3 id="import-meta-hot-data" tabindex="-1"><a class="header-anchor" href="#import-meta-hot-data" aria-hidden="true">#</a> <code>import.meta.hot.data</code></h3><p>细心的小伙伴当看到上文中的类型<code>ViteHotContext</code>结构时可能会留意到当中有且仅有一个只读属性<code>data</code>，它被用于在不同的模块实例间共享存储一些状态数据</p><blockquote><p><code>import.meta.hot.data</code> 对象在同一个更新模块的不同实例之间持久化。它可以用于将信息从模块的前一个版本传递到下一个版本</p></blockquote><p>我们可以将原来通过普通变量<code>count</code>保存的数值放在<code>import.meta.hot.data.count</code>上，每次使用变量的时候也从这个只读属性对象里取出来，这样就实现了基本的<code>保持状态数据能力</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// render.ts</span>
<span class="token keyword">let</span> timer<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// &gt;&gt;&gt;change_1: 初始化共享数据属性中的数值</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span>data<span class="token operator">?.</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span>data<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">(</span>newMod<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    newMod<span class="token punctuation">.</span><span class="token function">renderPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&gt;&gt;&gt;dispose&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">renderPage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// &gt;&gt;&gt;change_2: 在HMR更新执行的函数中添加 将共享数据恢复的逻辑</span>
  <span class="token keyword">const</span> <span class="token function-variable function">getCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token operator">?.</span>data <span class="token operator">||</span> <span class="token punctuation">{</span>
      count<span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
    data<span class="token punctuation">.</span>count <span class="token operator">=</span> data<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token keyword">return</span> data<span class="token punctuation">.</span>count
  <span class="token punctuation">}</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&gt;&gt;&gt;setInterval-1&#39;</span><span class="token punctuation">)</span>
  timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> app <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">querySelector</span><span class="token generic class-name"><span class="token operator">&lt;</span>HTMLDivElement<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
  app<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
      &lt;h1&gt;This is a demo for Vite-HMR&lt;/h1&gt;
      &lt;p target=&quot;_blank&quot;&gt;hmr is a excellent tool&lt;/p&gt;
    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在第三秒时将<code>console.log(&#39;&gt;&gt;&gt;setInterval-1&#39;)</code>修改为<code>console.log(&#39;&gt;&gt;&gt;setInterval-2&#39;)</code>，即会在控制台看到如下的情况</p><p><img src="https://charlex-1307761018.cos.ap-guangzhou.myqcloud.com/image/20230125134408.png" alt="20230125134408"></p><p>可见此时的<code>count</code>数值并没有被重置，实现了HMR处理下的状态数据保留(实际上是在初始化函数中加入了将共享数据恢复的逻辑)</p><h3 id="import-meta-hot-on" tabindex="-1"><a class="header-anchor" href="#import-meta-hot-on" aria-hidden="true">#</a> <code>import.meta.hot.on</code></h3><p>监听 <code>HMR</code> 的自定义事件，内部事件如下：</p><p><code>vite:beforeUpdate</code>:当更新即将被应用时（例如，一个模块将被替换） <code>vite:afterUpdate</code>:当更新已经被应用时（例如，一个模块已被替换） <code>vite:beforeFullReload</code>:当完整的重载即将发生时 <code>vite:beforePrune</code>:当不再需要的模块即将被剔除时 <code>vite:invalidate</code>:当使用 import.meta.hot.invalidate() 使一个模块失效时 <code>vite:error</code>:当发生错误时（例如，语法错误）</p><p>自定义事件可以通过Vite插件钩子函数进行发送:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Vite插件Hook</span>
<span class="token function">handleHotUpdate</span><span class="token punctuation">(</span><span class="token punctuation">{</span> server <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  server<span class="token punctuation">.</span>ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    type<span class="token operator">:</span> <span class="token string">&#39;custom&#39;</span><span class="token punctuation">,</span>
    event<span class="token operator">:</span> <span class="token string">&#39;custom-eventName&#39;</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token comment">// 模块监听逻辑</span>
<span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;custom-eventName&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 自定义更新逻辑</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="import-meta-hot-invalidate" tabindex="-1"><a class="header-anchor" href="#import-meta-hot-invalidate" aria-hidden="true">#</a> <code>import.meta.hot.invalidate</code></h3><p>一个接收自身的模块可以在运行时意识到它不能处理 <code>HMR</code> 更新，因此需要将更新强制传递给导入者。通过调用 <code>import.meta.hot.invalidate()</code>，<code>HMR</code> 服务将使调用方的导入失效，就像调用方不是接收自身的一样。这会同时在浏览器控制台和命令行中打印出一条信息，你可以传入这条信息，对发生失效的原因给予一些上下文</p><p>应该总调用 <code>import.meta.hot.accept</code>，即使你打算随后立即调用 <code>invalidate</code>，否则 <code>HMR</code> 客户端将不会监听未来对接收自身模块的更改。为了清楚地表达你的意图，我们建议在 <code>accept</code> 回调中调用 <code>invalidate</code>，例如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 你可以使用新的模块实例来决定是否使其失效。</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cannotHandleUpdate</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="import-meta-hot-prune" tabindex="-1"><a class="header-anchor" href="#import-meta-hot-prune" aria-hidden="true">#</a> import.meta.hot.prune</h3><p>注册一个回调，当模块在页面上不再被导入时调用。与 <code>hot.dispose</code> 相比，如果源代码更新时自行清理了副作用，你只需要在模块从页面上被删除时，使用此方法进行清理。<code>Vite</code> 目前在 <code>.css</code> 导入上使用此方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">setupOrReuseSideEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token function">setupOrReuseSideEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">prune</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 清理副作用</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="讲到最后" tabindex="-1"><a class="header-anchor" href="#讲到最后" aria-hidden="true">#</a> 讲到最后</h2><p>本篇文章简要介绍了<code>HMR</code>技术出现的背景以及<code>Vite-HMR</code>的简单应用，大致认识了常用的 <code>HMR-API</code></p><p>下届文章我们将继续学习<code>Vite-HMR</code>的实现原理</p><p>非常感谢大家耐心阅读完本篇文章，若文章中存在不足或需要改进的地方，欢迎在评论区提出</p><blockquote><p>感谢各位看到这里，如果你觉得本节内容还不错的话，欢迎各位的<strong>点赞、收藏、评论</strong>，大家的支持是我做内容的最大动力</p></blockquote><blockquote><p>本文为作者原创，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接，否则保留追究法律责任的权利</p></blockquote><h2 id="参考补充" tabindex="-1"><a class="header-anchor" href="#参考补充" aria-hidden="true">#</a> 参考补充</h2>`,83),r={href:"https://cn.vitejs.dev/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://rollupjs.org/guide/en/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://esbuild.github.io/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://juejin.cn/book/7050063811973218341",target:"_blank",rel:"noopener noreferrer"},v={href:"https://cn.vuejs.org/",target:"_blank",rel:"noopener noreferrer"};function b(g,h){const s=e("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[n("a",r,[a("Vite官方文档"),t(s)])]),n("p",null,[n("a",d,[a("Rollup官方文档"),t(s)])]),n("p",null,[n("a",k,[a("Esbuild官方文档"),t(s)])]),n("p",null,[n("a",m,[a("掘金小册"),t(s)])]),n("p",null,[n("a",v,[a("Vue3文档"),t(s)])])])}const y=p(l,[["render",b],["__file","vite-hmr-1.html.vue"]]);export{y as default};
