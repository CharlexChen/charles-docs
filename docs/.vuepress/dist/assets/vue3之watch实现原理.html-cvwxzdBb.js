import{_ as p,r as e,o,c,f as l,a as n,b as s,e as t,d as u}from"./app-yWIsA8PS.js";const i={},r=u(`<h1 id="陈同学i前端-手写vue3-响应式系统-watch" tabindex="-1"><a class="header-anchor" href="#陈同学i前端-手写vue3-响应式系统-watch" aria-hidden="true">#</a> [陈同学i前端] 手写Vue3 | 响应式系统-watch</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>大家好，我是陈同学，一枚野生前端开发者，感谢各位的点赞、收藏、评论</p><p>上一章节文章中我们学习了Vue3的响应系统，接下来我们将基于Vue3-watch的简单实现进行优化，通过本篇文章你能快速掌握watch通用特性的实现思路与竞态问题的解决方式</p><blockquote><p>若尚未阅读第一章节的【响应系统】滴同学，请点击此处传送门</p></blockquote><p>本文阅读成本与收益如下：</p><p>阅读耗时：<code>7mins</code> 全文字数：<code>7k+</code></p><h2 id="预期效益" tabindex="-1"><a class="header-anchor" href="#预期效益" aria-hidden="true">#</a> 预期效益</h2><ul><li>学习Vue3响应系统watch实现原理以及优化</li></ul><h2 id="watch基本实现与优化" tabindex="-1"><a class="header-anchor" href="#watch基本实现与优化" aria-hidden="true">#</a> watch基本实现与优化</h2><p>上一节内容我们已经将watch的基本实现完成，而watch的本质其实就是对effect函数的二次封装，以下为简单的实现代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">watchVisit</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> seen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">!=</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> value <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> seen<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>
    seen<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> ind <span class="token keyword">in</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">watchVisit</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> seen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">watch</span><span class="token punctuation">(</span><span class="token parameter">source<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> getter <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> source <span class="token operator">==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        getter <span class="token operator">=</span> source<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">getter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">watchVisit</span><span class="token punctuation">(</span>dataProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> oldValue<span class="token punctuation">,</span> newValue<span class="token punctuation">;</span>
    <span class="token keyword">const</span> effectFn <span class="token operator">=</span> <span class="token function">effect</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">lazy</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token function">scheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                newValue <span class="token operator">=</span> <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">cb</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
                oldValue <span class="token operator">=</span> newValue<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    oldValue <span class="token operator">=</span> <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但很快我们会发现在日常使用watch时会允许传入第三个参数options以便设置自定义效果行为</p><p>但就目前实现并不支持，因此我们本节关注并实现watch的两个特性：</p><ul><li>立即执行回调函数</li><li>回调函数的执行时机</li></ul><h3 id="第一个特性-立即执行函数" tabindex="-1"><a class="header-anchor" href="#第一个特性-立即执行函数" aria-hidden="true">#</a> 第一个特性-<code>立即执行函数</code></h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&gt;&gt;&gt;changed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>预期效果为，回调函数会在watch创建时立即执行一次</p><p>明确目标效果后我们开始对watch实现进行改造</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">watch</span><span class="token punctuation">(</span><span class="token parameter">source<span class="token punctuation">,</span> cb， options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// change_1：新增options参数</span>
    <span class="token keyword">let</span> getter <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> source <span class="token operator">==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        getter <span class="token operator">=</span> source<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">getter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">watchVisit</span><span class="token punctuation">(</span>dataProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> oldValue<span class="token punctuation">,</span> newValue<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">schedule</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// change_2：提取scheduler逻辑</span>
        newValue <span class="token operator">=</span> <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">cb</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        oldValue <span class="token operator">=</span> newValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> effectFn <span class="token operator">=</span> <span class="token function">effect</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">lazy</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token literal-property property">scheduler</span><span class="token operator">:</span> schedule <span class="token comment">// change_3：将提取逻辑作为回调设置为scheduler</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// change_4：判断options.immediate为true时立即执行回调函数</span>
        <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        oldValue <span class="token operator">=</span> <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第二个特性-回调函数的执行时机" tabindex="-1"><a class="header-anchor" href="#第二个特性-回调函数的执行时机" aria-hidden="true">#</a> 第二个特性-<code>回调函数的执行时机</code></h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&gt;&gt;&gt;changed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">flush</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span> <span class="token comment">// &#39;pre&#39; | &#39;post&#39; | &#39;sync&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>flush参数</code>本质上时指定调度函数的执行先机</p><ul><li>pre：回调函数会在watch注册时调用一次</li><li>post：调度函数需要将副作用函数放入微任务队列当中（等待DOM更新结束再执行）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">watch</span><span class="token punctuation">(</span><span class="token parameter">source<span class="token punctuation">,</span> cb， options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> getter <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> source <span class="token operator">==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        getter <span class="token operator">=</span> source<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">getter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">watchVisit</span><span class="token punctuation">(</span>dataProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> oldValue<span class="token punctuation">,</span> newValue<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">schedule</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        newValue <span class="token operator">=</span> <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">cb</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        oldValue <span class="token operator">=</span> newValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> effectFn <span class="token operator">=</span> <span class="token function">effect</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">lazy</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token function-variable function">scheduler</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">//change_1：根据flush属性决定schedule函数执行时机</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>flush <span class="token operator">===</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>schedule<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        oldValue <span class="token operator">=</span> <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上模拟实现了flush：post的逻辑，pre与sync的模拟实现，大家可以自行思考应该如何设计（其实是小编lazy为true了hhh）</p><h2 id="过期的副作用" tabindex="-1"><a class="header-anchor" href="#过期的副作用" aria-hidden="true">#</a> 过期的副作用</h2><p>作为一名技术研发者，在多进程或多线程编程当中，我们偶尔会碰到<code>竞态问题</code></p><blockquote><p><strong>竞态问题</strong>：指的是一个系统或者进程（线程）的输出依赖于不受控制的事件出现顺序或时机（又称竞态条件）</p></blockquote><p>例子如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> resp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token function">watch</span><span class="token punctuation">(</span>dataProxy<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/path/to/request&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    resp <span class="token operator">=</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>监听<code>dataProxy</code>代理对象，若其中有属性发生改变，则发送一个请求并将请求结果赋值给<code>resp</code>变量</p><p>代码实现逻辑上表面看确实没有什么问题，但在实际业务当中存在连续多次改变<code>dataProxy</code>代理对象的可能</p><p>假设现在有两次变动，引起了两次请求A、B（A先于B发出），因为网络传输、服务分发等各种原因，我们无法保证请求A最快收到响应</p><p>若请求B响应快于请求A的响应，则会造成resp变量在两次请求结束后所保存的数据内容并非最新版本</p><p><img src="https://cr-pic-1257999694.cos.ap-guangzhou.myqcloud.com/markdown/image-20220821173731163.png" alt="image-20220821173731163"></p><p>用更加专业性的角度来看，请求A是副作用函数第一次执行所产生的副作用，请求B是第二次执行所产生的副作用</p><p>请求B后发生，所以它对应的副作用是<strong>最新</strong>的，而请求A的副作用是<strong>过期</strong>的</p><p>所以我们需要一个使得副作用&quot;过期&quot;的方式，而在Vue3中，这个方法就是<u>通过onInvalidate函数注册回调，当副作用函数的执行过期时进行标记</u></p><p>接下来我们需要完成两件事情：</p><ul><li>学习如何注册过期回调钩子函数</li><li>watch机制中如何实现注册钩子函数的功能</li></ul><p>首先是注册过期钩子函数，这个步骤比较简单，只需要简单修改一下上面的代码逻辑即可实现</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> resp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token function">watch</span><span class="token punctuation">(</span>dataProxy<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> onInvalidate</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> isExpired <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token function">onInvalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// change_1：注册副作用函数过期时的钩子函数</span>
        isExpired <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/path/to/request&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isExpired<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// change_2：副作用函数尚未过期，执行结果保存覆盖</span>
        resp <span class="token operator">=</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上在原本的回调函数当中新增了第三个入参onInvalidate函数，在回调内直接调用onInvalidate注册一个钩子函数，这个钩子函数能够在下次回调函数执行前被watch的逻辑调用标志上一次运行回调所造成的副作用已经过期</p><p>对于onInvalidate的实现需要再次对watch函数进行改造，新增的内容有：</p><ul><li>cleanupFn：用于保存注册的过期回调钩子函数</li><li>onInvalidate：定义注册函数内部的逻辑</li><li>在schedule内判断cleanupFn存在并调用钩子函数以标识上次执行结果已失效</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">watch</span><span class="token punctuation">(</span><span class="token parameter">source<span class="token punctuation">,</span> cb， options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> getter <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> source <span class="token operator">==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        getter <span class="token operator">=</span> source<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">getter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">watchVisit</span><span class="token punctuation">(</span>dataProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> oldValue<span class="token punctuation">,</span> newValue<span class="token punctuation">;</span>
    <span class="token keyword">let</span> cleanupFn<span class="token punctuation">;</span> <span class="token comment">// change_1：保存watch使用者注册的过期回调钩子函数</span>
    <span class="token keyword">function</span> <span class="token function">onInvalidate</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// change_2：定义用于注册过期钩子函数的注册函数</span>
        cleanupFn <span class="token operator">=</span> fn<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> <span class="token function-variable function">schedule</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        newValue <span class="token operator">=</span> <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cleanupFn<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// change_3：执行首次执行的副作用函数所注册的过期钩子函数</span>
            <span class="token function">cleanupFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">cb</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> onInvalidate<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// change_4：将注册函数传递给开发者定义的cb回调函数</span>
        oldValue <span class="token operator">=</span> newValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> effectFn <span class="token operator">=</span> <span class="token function">effect</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">lazy</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token function-variable function">scheduler</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>flush <span class="token operator">===</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>schedule<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        oldValue <span class="token operator">=</span> <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cr-pic-1257999694.cos.ap-guangzhou.myqcloud.com/markdown/image-20220821183747785.png" alt="摘自：Vue.js设计与实现"></p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>本节文章我们进一步学习了Vue3响应系统当中watch实现的优化思路</p><p>基于watch的简单实现，我们讨论继续依照Vue3中watch的能力特性进行完善</p><p>关于立即执行函数，我们将函数是否立即执行的控制权交回给开发者，只需要传递<code>options.immediate</code>为true即可使得注册的回调函数立刻执行；当然在前端开发当中我们时常会遇到函数执行时机控制的场景（如：DOM渲染后再执行相应的函数以操作新的DOM元素），此时我们提供一个额外的选项<code>options.flush</code>用于控制回调函数应当执行的时机</p><p>而关于过期副作用函数，我们提供一个注册函数，允许开发者传递取消过期副作用影响的钩子函数</p><p>可以发现，本节内容都是通过将原本watch内部的逻辑进行扩展并暴露函数或选项参数的形式将执行逻辑的控制权交给开发者进行业务定制，有过设计模式学习工作经验的同学应该会有更加深刻的体会</p><h2 id="讲到最后" tabindex="-1"><a class="header-anchor" href="#讲到最后" aria-hidden="true">#</a> 讲到最后</h2><p>本节文章是Vue3响应系统最后一篇！</p>`,56),k={href:"https://juejin.cn/post/7133079431454654494",target:"_blank",rel:"noopener noreferrer"},d={href:"https://juejin.cn/post/7133508821250473998",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"后续关于【响应系统】若还有内容补充会在评论区会以原文更新的方式通知，敬请各位留意～",-1),m=n("p",null,"谢谢大家，我们下节再见！！！",-1),b=n("blockquote",null,[n("p",null,[s("感谢各位看到这里，如果你觉得本节内容还不错的话，欢迎各位的"),n("strong",null,"点赞、收藏、评论"),s("，大家的支持是我做内容的最大动力")])],-1),h=n("blockquote",null,[n("p",null,"本文为作者原创，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接，否则保留追究法律责任的权利")],-1),f=n("h2",{id:"补充-vue3传送门链接",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#补充-vue3传送门链接","aria-hidden":"true"},"#"),s(" 补充-Vue3传送门链接")],-1),w={href:"https://cn.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fcore",target:"_blank",rel:"noopener noreferrer"};function y(V,_){const a=e("ExternalLinkIcon");return o(),c("div",null,[l(`
 * @Author: Charlex
 * @Date: 2022-08-20 12:13:15
 * @LastEditors: charlexchen charlexchen@tencent.com
 * @LastEditTime: 2022-08-24 10:51:48
 * @FilePath: /frontend_study_charles/publish-article/vue3之watch实现原理.md
 * @Description: 描述内容
`),r,n("p",null,[n("a",k,[s("Vue3响应系统-基础"),t(a)]),n("a",d,[s("Vue3响应系统-进阶"),t(a)])]),v,m,b,h,f,n("p",null,[n("a",w,[s("Vue3文档"),t(a)])]),n("p",null,[n("a",g,[s("Vue3仓库"),t(a)])])])}const j=p(i,[["render",y],["__file","vue3之watch实现原理.html.vue"]]);export{j as default};
